// Generated by CoffeeScript 1.9.0
(function() {
  var DEFAULTS, TRANS, css, distance, doc, idof, later, margin, merge, notr, oneTrans, sel, stacks, styles,
    __slice = [].slice;

  merge = function() {
    var k, o, os, t, v, _i, _len;
    t = arguments[0], os = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = os.length; _i < _len; _i++) {
      o = os[_i];
      for (k in o) {
        v = o[k];
        if (v !== void 0) {
          t[k] = v;
        }
      }
    }
    return t;
  };

  doc = document;

  sel = function(s) {
    if (typeof s === 'string') {
      return doc.querySelector(s);
    } else {
      return s;
    }
  };

  distance = function(el) {
    return el.offsetTop + (el.offsetParent ? distance(el.offsetParent) : 0);
  };

  later = function(f) {
    return setTimeout(f, 1);
  };

  styles = ".notr {\n    margin-top: 0;\n    opacity: 1.0;\n    float: left;\n    clear: both;\n    transition: margin-top 0.2s, opacity 0.2s;\n    box-shadow: 0 0 2px rgba(0,0,0,0.4);\n    padding: 9px 14px;\n    border-radius: 5px;\n    border: none;\n    color: #666;\n    margin-bottom: 3px;\n    background: white;\n    cursor: pointer;\n}\n.notrstack {\n    position: fixed;\n    z-index: 9000;\n}";

  css = doc.createElement('style');

  css.type = 'text/css';

  css.innerHTML = styles;

  doc.head.appendChild(css);

  stacks = {};

  margin = function(el, parent) {
    var dist, height;
    if (parent) {
      parent.appendChild(el);
    }
    dist = distance(el);
    height = el.offsetHeight;
    if (parent) {
      parent.removeChild(el);
    }
    return -1 * (height + dist);
  };

  TRANS = 'transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd'.split(' ');

  oneTrans = function(el, fn) {
    var cb, remove;
    cb = function(ev) {
      remove();
      return fn(ev);
    };
    remove = function() {
      return TRANS.forEach(function(t) {
        return el.removeEventListener(t, cb);
      });
    };
    return TRANS.forEach(function(t) {
      return el.addEventListener(t, cb);
    });
  };

  DEFAULTS = {
    html: 'Oh, why hallow thar!',
    className: 'alert alert-info',
    stack: 'def',
    stay: 4000,
    id: null,
    onclick: null
  };

  idof = function(stack, id) {
    return "notr-" + stack + "-" + id;
  };

  notr = function(opts, callback) {
    var dispatch, div, stack;
    if (opts == null) {
      opts = {};
    }
    if (typeof opts === 'string') {
      opts = {
        html: opts
      };
    }
    if (callback) {
      opts.callback = callback;
    }
    opts = merge({}, DEFAULTS, opts);
    stack = stacks[opts.stack];
    if (!stack) {
      return;
    }
    stack.attach();
    if (opts.id) {
      div = doc.getElementById(idof(opts.stack, opts.id));
    }
    if (!div) {
      div = doc.createElement('div');
    }
    if (opts.id) {
      div.id = idof(opts.stack, opts.id);
    }
    div.innerHTML = opts.html;
    div.className = "notr " + opts.className;
    if (div.timeout) {
      clearTimeout(div.timeout);
    }
    div.timeout = null;
    div.callback = null;
    dispatch = function(name) {
      var evt;
      evt = document.createEvent('Event');
      evt.initEvent(name, true, false);
      return div.dispatchEvent(evt);
    };
    if (!div.show) {
      div.show = function() {
        if (div.parentNode) {
          return;
        }
        dispatch('notr:beforeshow');
        div.style.opacity = 0;
        div.style.marginTop = (margin(div, stack.container)) + "px";
        stack.container.appendChild(div);
        return later(function() {
          div.style.marginTop = 0;
          div.style.opacity = null;
          return oneTrans(div, function() {
            return dispatch('notr:show');
          });
        });
      };
    }
    later(function() {
      return typeof div.show === "function" ? div.show() : void 0;
    });
    div.callback = opts.callback;
    if (!div.hide) {
      div.hide = function(ev) {
        var cb;
        if (!div.show) {
          return;
        }
        if (div.timeout) {
          clearTimeout(div.timeout);
        }
        div.style.opacity = 0;
        div.style.marginTop = (margin(div)) + "px";
        cb = div.callback;
        div.hide = function() {};
        div.show = null;
        div.timeout = null;
        div.callback = null;
        dispatch('notr:beforehide');
        if (typeof cb === "function") {
          cb(ev);
        }
        return oneTrans(div, function() {
          div.parentNode.removeChild(div);
          dispatch('notr:hide');
          return stack.detachIfEmpty();
        });
      };
    }
    div.onclick = opts.onclick ? opts.onclick : div.hide;
    if (opts.stay > 0) {
      div.timeout = setTimeout(div.hide, opts.stay);
    }
    return div;
  };

  notr.defineStack = function(name, parent, styles) {
    var el;
    stacks[name] = {
      container: el = doc.createElement('div'),
      attach: function() {
        var _ref;
        return (_ref = sel(parent)) != null ? _ref.appendChild(el) : void 0;
      },
      detachIfEmpty: function() {
        var _ref;
        if (!el.childNodes.length) {
          return (_ref = el.parentNode) != null ? _ref.removeChild(el) : void 0;
        }
      }
    };
    el.className = "notrstack notrstack-" + name;
    return merge(el.style, styles != null ? styles : {});
  };

  notr.defineStack('def', 'body', {
    top: '65px',
    right: '15px'
  });

  if (typeof module === 'object') {
    module.exports = notr;
  } else if (typeof define === 'function' && define.amd) {
    define(function() {
      return notr;
    });
  } else {
    this.notr = notr;
  }

}).call(this);

//# sourceMappingURL=notr.js.map
